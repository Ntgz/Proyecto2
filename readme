1.Crear base de datos atlasdb  y conectar con compass
2.crear servidor nodejs(crear package json para almacenar dependencias)
2.1 npm init
3.crear index.js
4.Agregar express con "npm i express"
5.Agregar en package.json ""type": "module"" para importar express
6.Crear la variable app para crear el servidor
7.Crear use para el routing(asi lo maneja express)
8.Instalar dependencia de desarrollo para no estar recargando el server ("npm i --save-dev nodemon")
9.Conectar base de datos con la app, 1. crear carpeta "config" y dentro de config camos a crear "db.js"
10.Instalar moongose ("npm i moongose")  para conectar la bd
11.Configurar archivo db.js con la configuracion de moongose y poner la ruta de atlas que aparece en "connect your aplication"
12.importar la BD en index.js 
13. crear variables de entorno para proteger credenciales (.env) se corta la conexion en db.js y se pone la variable decalarada en .env
14.Se instala la dependencia (npm i dotenv) para leer esos archivos
15.declarar variable PORT para cuando se haga el deployment en un servidor especializado va a existir,
16.Crear modelos (carpeta "models") y registrarlo en mongoose,
17.Crear routing (carpeta "routes") configurarlo y luego exportarlo para importarlo en el index.js
18.Crear las rutas principales en la carpeta "routes"
19.Crear carpeta "controller" ahi se exportaran las funciones y se pondran en sus respectivas rutas en la carpeta de routes
20.Convertir a json para que sea entendido por el front
21.probar api
22.colocar "app.use(express.json());" par enviarle datos
23.importar el modelo en el controler para mandarle datos a la bd
24. para hashear descargar dependencia (npm i bcrypt)
FRONTEND
1.Cargar framework vite "npm init vite@latest" es como "create react app"
2.instalar dependencias de desarrollo "npm i --save-dev tailwindcss postcss autoprefixer"
3. instalar tailwindcss "npx tailwindcss init -p"
4.configurar el tailwind colocar en content lo siguiente ""index.html", "./src/**/*.jsx""
5.instalar libreria de routing "npm i react-router-dom",
6. import { BrowserRouter, Routes, Route } from 'react-router-dom'
7. se customiza el componente con validaciones
8. se descarga axios para que podamos ingresar datos a la api (npm i axios)
9. instalar cors para que puedan comunicarse entre urls (npm i cors) DENTRO DEL BACKEND
10. importar cors en index.js y configurarlo, hacer los llamados en ese orden
11.comunicar el backend con el FRONTEND